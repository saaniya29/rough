def is_safe(board, row, col):
    for i in range(row):
        if board[i] == col or abs(board[i] - col) == row - i:
            return False
    return True
def solve_n_queens(n, row=0, board=[]):
    if row == n:
        return [board[:]] if len(board) == n else []
    solutions = []
    for col in range(n):
        if is_safe(board, row, col):
            board.append(col)
            solutions.extend(solve_n_queens(n, row + 1, board))
            board.pop()
    return solutions
def print_solution(board):
    for row in board:
        print(" ".join('Q' if row == i else '-' for i in range(len(board))))
        
n = 8
solutions = solve_n_queens(n)
if solutions:
    print_solution(solutions[0])
else:
    print("No solution found for", n, "-Queens problem.")
