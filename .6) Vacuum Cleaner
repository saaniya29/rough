class VacuumCleaner:
    def __init__(self, grid):
        self.grid = grid
        self.moves = []
    def clean_all(self):
        self.moves = [(r, c) for r, row in enumerate(self.grid) for c, cell in enumerate(row) if cell == 'dirty']
    def move(self, dr, dc):
        r, c = self.moves[-1]
        new_r, new_c = r + dr, c + dc
        if 0 <= new_r < len(self.grid) and 0 <= new_c < len(self.grid[0]):
            self.moves.append((new_r, new_c))
            return True
        return False
    def move_left(self): return self.move(0, -1)
    def move_right(self): return self.move(0, 1)
    def move_up(self): return self.move(-1, 0)
    def move_down(self): return self.move(1, 0)
    def print_moves(self):
        [print(f"Clean cell at ({r}, {c})") for r, c in self.moves]

grid = [['dirty', 'clean', 'dirty'], ['clean', 'dirty', 'clean'], ['dirty', 'clean', 'dirty']]
vacuum = VacuumCleaner(grid)
vacuum.clean_all()
[vacuum.move_down() for _ in range(3)]
[vacuum.move_right() for _ in range(2)]
[vacuum.move_down() for _ in range(3)]
[vacuum.move_left() for _ in range(2)]
vacuum.print_moves()
