import heapq
def astar_search(graph, start, goal):
    open_list, g_score, came_from = [(0, start)], {start: 0}, {}
    while open_list:
        current_cost, current_node = heapq.heappop(open_list)
        if current_node == goal:
            path = []
            while current_node in came_from: path.append(current_node); current_node = came_from[current_node]
            return ['A'] + path[::-1]

        for neighbor, cost in graph[current_node].items():
            tentative_g_score = g_score[current_node] + cost
            if tentative_g_score < g_score.get(neighbor, float('inf')):
                came_from[neighbor], g_score[neighbor] = current_node, tentative_g_score
                heapq.heappush(open_list, (tentative_g_score + 0, neighbor))
graph = {
    'A': {'C': 1},
    'B': {'C': 2, 'D': 3},
    'C': {'A': 1, 'B': 2, 'E': 3, 'F': 4},
    'D': {'B': 3, 'F': 2},
    'E': {'C': 3, 'F': 1},
    'F': {'C': 4, 'D': 2, 'E': 1, 'G': 2},
    'G': {'F': 2}}
start, goal = 'A', 'G'
path = astar_search(graph, start, goal)
print("Shortest Path:", ' -> '.join(path))
